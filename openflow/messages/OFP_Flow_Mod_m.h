//
// Generated file, do not edit! Created by nedtool 4.6 from messages/OFP_Flow_Mod.msg.
//

#ifndef _OFP_FLOW_MOD_M_H_
#define _OFP_FLOW_MOD_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "openflow.h"
    #include "Open_Flow_Message_m.h"
// }}

/**
 * Class generated from <tt>messages/OFP_Flow_Mod.msg:14</tt> by nedtool.
 * <pre>
 * // Modifications to a flow table by the controller.
 * packet OFP_Flow_Mod extends Open_Flow_Message
 * {
 *     uint64_t cookie; //* Opaque controller-issued identifier.   
 * 
 *     uint64_t cookie_mask; //* Mask used to restrict the cookie bits
 *                             //that must match when the command is
 *                             //OFPFC_MODIFY* or OFPFC_DELETE*. A value
 *                             //of 0 indicates no restriction.   
 *     //* Flow actions.   
 *     uint8_t table_id; //* ID of the table to put the flow in.
 *                             //For OFPFC_DELETE_* commands, OFPTT_ALL
 *                             //can also be used to delete matching
 *                             //flows from all tables.   
 *     uint8_t command; //* One of OFPFC_*.   
 *     uint16_t idle_timeout; //* Idle time before discarding (seconds).   
 *     uint16_t hard_timeout; //* Max time before discarding (seconds).   
 *     uint16_t priority; //* Priority level of flow entry.   
 *     uint32_t buffer_id; //* Buffered packet to apply to, or
 *                             //OFP_NO_BUFFER.
 *                             //Not meaningful for OFPFC_DELETE*.   
 *     uint32_t out_port; //* For OFPFC_DELETE* commands, require
 *                             //matching entries to include this as an
 *                             //output port. A value of OFPP_ANY
 *                             //indicates no restriction.   
 *     uint32_t out_group; //* For OFPFC_DELETE* commands, require
 *                             //matching entries to include this as an
 *                             //output group. A value of OFPG_ANY
 *                             //indicates no restriction.   
 *     uint16_t flags; //* One of OFPFF_*.   
 *     uint8_t pad[2];
 *     oxm_basic_match match; //* Fields to match. Variable size.   
 *     ofp_action_output actions[];
 *     //struct ofp_instruction instructions[0]; /* Instruction set   
 * 
 * }
 * </pre>
 */
class OFP_Flow_Mod : public ::Open_Flow_Message
{
  protected:
    uint64_t cookie_var;
    uint64_t cookie_mask_var;
    uint8_t table_id_var;
    uint8_t command_var;
    uint16_t idle_timeout_var;
    uint16_t hard_timeout_var;
    uint16_t priority_var;
    uint32_t buffer_id_var;
    uint32_t out_port_var;
    uint32_t out_group_var;
    uint16_t flags_var;
    uint8_t pad_var[2];
    oxm_basic_match match_var;
    ofp_action_output *actions_var; // array ptr
    unsigned int actions_arraysize;

  private:
    void copy(const OFP_Flow_Mod& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OFP_Flow_Mod&);

  public:
    OFP_Flow_Mod(const char *name=NULL, int kind=0);
    OFP_Flow_Mod(const OFP_Flow_Mod& other);
    virtual ~OFP_Flow_Mod();
    OFP_Flow_Mod& operator=(const OFP_Flow_Mod& other);
    virtual OFP_Flow_Mod *dup() const {return new OFP_Flow_Mod(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint64_t getCookie() const;
    virtual void setCookie(uint64_t cookie);
    virtual uint64_t getCookie_mask() const;
    virtual void setCookie_mask(uint64_t cookie_mask);
    virtual uint8_t getTable_id() const;
    virtual void setTable_id(uint8_t table_id);
    virtual uint8_t getCommand() const;
    virtual void setCommand(uint8_t command);
    virtual uint16_t getIdle_timeout() const;
    virtual void setIdle_timeout(uint16_t idle_timeout);
    virtual uint16_t getHard_timeout() const;
    virtual void setHard_timeout(uint16_t hard_timeout);
    virtual uint16_t getPriority() const;
    virtual void setPriority(uint16_t priority);
    virtual uint32_t getBuffer_id() const;
    virtual void setBuffer_id(uint32_t buffer_id);
    virtual uint32_t getOut_port() const;
    virtual void setOut_port(uint32_t out_port);
    virtual uint32_t getOut_group() const;
    virtual void setOut_group(uint32_t out_group);
    virtual uint16_t getFlags() const;
    virtual void setFlags(uint16_t flags);
    virtual unsigned int getPadArraySize() const;
    virtual uint8_t getPad(unsigned int k) const;
    virtual void setPad(unsigned int k, uint8_t pad);
    virtual oxm_basic_match& getMatch();
    virtual const oxm_basic_match& getMatch() const {return const_cast<OFP_Flow_Mod*>(this)->getMatch();}
    virtual void setMatch(const oxm_basic_match& match);
    virtual void setActionsArraySize(unsigned int size);
    virtual unsigned int getActionsArraySize() const;
    virtual ofp_action_output& getActions(unsigned int k);
    virtual const ofp_action_output& getActions(unsigned int k) const {return const_cast<OFP_Flow_Mod*>(this)->getActions(k);}
    virtual void setActions(unsigned int k, const ofp_action_output& actions);
};

inline void doPacking(cCommBuffer *b, OFP_Flow_Mod& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OFP_Flow_Mod& obj) {obj.parsimUnpack(b);}


#endif // ifndef _OFP_FLOW_MOD_M_H_

